<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Minijuego coraz√≥n - 2 a√±os juntos üíñ</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      height: 100%;
      overflow: hidden;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      font-family: 'Arial Rounded MT Bold', 'Segoe UI', sans-serif;
      color: white;
      /* Eliminamos touch-action: none del body */
    }

    .game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      padding-top: 60px;
    }

    .header {
      position: absolute;
      top: 10px;
      left: 0;
      right: 0;
      text-align: center;
      z-index: 10;
      padding: 10px;
    }

    .title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #fff;
      text-shadow: 0 2px 4px rgba(0,0,0,0.3);
      margin-bottom: 5px;
    }

    #score {
      position: absolute;
      top: 50px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 1.2rem;
      color: #fbb6ce;
      background: rgba(0,0,0,0.3);
      padding: 8px 16px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
      border: 2px solid rgba(255,255,255,0.2);
      z-index: 10;
    }

canvas {
  display: block;
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.3);
  background: transparent;
  width: 95vw;
  height: 75vh;
  pointer-events: auto;
  touch-action: none;
}

    .instructions {
      position: absolute;
      bottom: 20px;
      left: 0;
      right: 0;
      text-align: center;
      font-size: 0.9rem;
      color: rgba(255,255,255,0.8);
      padding: 10px;
      z-index: 10;
    }

    /* Animaciones */
    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
    }

    .floating {
      animation: float 3s ease-in-out infinite;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .title {
        font-size: 1.2rem;
      }
      
      #score {
        font-size: 1rem;
        top: 45px;
      }
      
      canvas {
        width: 98vw;
        height: 70vh;
      }
      
      .instructions {
        font-size: 0.8rem;
        bottom: 15px;
      }
    }

    @media (max-width: 480px) {
      .title {
        font-size: 1rem;
      }
      
      #score {
        font-size: 0.9rem;
        padding: 6px 12px;
      }
      
      canvas {
        width: 99vw;
        height: 65vh;
      }
      
      .instructions {
        font-size: 0.7rem;
        bottom: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="game-container">
    <div class="header">
      <div class="title floating">üéâ 10 a√±os juntos üíñ</div>
    </div>
    
    <div id="score">Corazones tocados: 0</div>
    <canvas id="gameCanvas"></canvas>
    
    <div class="instructions">
      üñ±Ô∏è Haz clic o toca los corazones que caen para ganar puntos!<br>
      ¬°Cuantos m√°s toques, m√°s corazones aparecer√°n!
    </div>
  </div>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    
    // Configuraci√≥n
    const heartCount = 8;
    const maxHearts = 50;
    let score = 0;
    const hearts = [];
    const backgroundParticles = [];
    const explosions = [];

    // Clases (sin cambios)
    class Heart {
      constructor() {
        this.reset();
        this.rotationSpeed = (Math.random() - 0.5) * 0.03; 
      }
      
      reset() {
        this.x = Math.random() * canvas.width;
        this.y = -50 - Math.random() * 100;
        this.size = 25 + Math.random() * 15;
        this.speed = 0.8 + Math.random() * 1.2;
        this.angle = 0;
        this.color = `hsl(${330 + Math.random() * 20}, 80%, 65%)`;
      }
      
      draw() {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        ctx.fillStyle = this.color;
        ctx.shadowColor = this.color;
        ctx.shadowBlur = 10;
        ctx.beginPath();
        const s = this.size;
        const topCurveHeight = s * 0.3;
        ctx.moveTo(0, topCurveHeight);
        ctx.bezierCurveTo(0, 0, -s/2, 0, -s/2, topCurveHeight);
        ctx.bezierCurveTo(-s/2, (s + topCurveHeight)/2, 0, (s + topCurveHeight)/1.5, 0, s);
        ctx.bezierCurveTo(0, (s + topCurveHeight)/1.5, s/2, (s + topCurveHeight)/2, s/2, topCurveHeight);
        ctx.bezierCurveTo(s/2, 0, 0, 0, 0, topCurveHeight);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
      }
      
      update() {
        this.y += this.speed;
        this.angle += this.rotationSpeed;
        if (this.y > canvas.height + this.size) this.reset();
        this.draw();
      }
      
      isClicked(mx, my) {
        const dx = mx - this.x;
        const dy = my - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        return distance < this.size * 1.5;
      }
    }

    class Particle {
      constructor(x, y, color = '#ffb6c1') {
        this.x = x;
        this.y = y;
        this.size = 2 + Math.random() * 3;
        this.speedY = 0.3 + Math.random() * 0.7;
        this.speedX = (Math.random() - 0.5) * 0.6;
        this.color = color;
        this.maxLife = 1000 + Math.floor(Math.random() * 2000);
        this.life = this.maxLife;
      }
      
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.life--;
        const alpha = this.life / this.maxLife;
        ctx.fillStyle = `rgba(255,182,193,${alpha})`;
        ctx.shadowColor = `rgba(255,182,193,${alpha})`;
        ctx.shadowBlur = 5;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
      
      isDone() {
        return this.life <= 0 || this.y > canvas.height + this.size || this.x < -this.size || this.x > canvas.width + this.size;
      }
      
      reset() {
        this.x = Math.random() * canvas.width;
        this.y = -10;
        this.size = 2 + Math.random() * 3;
        this.speedY = 0.3 + Math.random() * 0.7;
        this.speedX = (Math.random() - 0.5) * 0.6;
        this.maxLife = 1000 + Math.floor(Math.random() * 2000);
        this.life = this.maxLife;
      }
    }

    class Explosion {
      constructor(x, y) {
        this.particles = [];
        for (let i = 0; i < 15; i++) {
          const angle = Math.random() * Math.PI * 2;
          const speed = 1 + Math.random() * 2;
          this.particles.push({
            x,
            y,
            vx: Math.cos(angle) * speed,
            vy: Math.sin(angle) * speed,
            size: 3 + Math.random() * 3,
            alpha: 1
          });
        }
      }
      
      update() {
        this.particles.forEach(p => {
          p.x += p.vx;
          p.y += p.vy;
          p.vy += 0.05;
          p.alpha -= 0.03; 
          ctx.fillStyle = `rgba(255,182,193,${p.alpha})`;
          ctx.shadowColor = `rgba(255,182,193,${p.alpha})`;
          ctx.shadowBlur = 8;
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.size, 0, Math.PI*2);
          ctx.fill();
        });
      }
      
      isDone() {
        return this.particles.every(p => p.alpha <= 0);
      }
    }

    // ‚úÖ Inicializar objetos despu√©s de redimensionar
    function initGameObjects() {
      hearts.length = 0;
      backgroundParticles.length = 0;
      
      for (let i = 0; i < heartCount; i++) {
        hearts.push(new Heart());
      }
      for (let i = 0; i < 80; i++) {
        backgroundParticles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height
        ));
      }
    }

function resizeCanvas() {
  // Obtener el tama√±o que el CSS le da al canvas
  const displayWidth = canvas.clientWidth;
  const displayHeight = canvas.clientHeight;
  
  // Si el canvas no tiene tama√±o (ej. display:none), usar fallback
  if (displayWidth === 0 || displayHeight === 0) {
    canvas.width = Math.min(window.innerWidth * 0.95, 500);
    canvas.height = Math.min(window.innerHeight * 0.75, 800);
  } else {
    // ‚úÖ Hacer que el tama√±o l√≥gico = tama√±o visual
    canvas.width = displayWidth;
    canvas.height = displayHeight;
  }
  
  initGameObjects();
}

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas(); // Esto ahora inicializa TODO correctamente

    function checkIncreaseHearts() {
      const extraHearts = Math.floor(score / 20) * 3;
      const desiredHearts = Math.min(heartCount + extraHearts, maxHearts);
      while (hearts.length < desiredHearts) {
        hearts.push(new Heart());
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Fondo
      const gradient = ctx.createRadialGradient(
        canvas.width/2, canvas.height/2, 0,
        canvas.width/2, canvas.height/2, Math.max(canvas.width, canvas.height)
      );
      gradient.addColorStop(0, 'rgba(255, 182, 193, 0.1)');
      gradient.addColorStop(1, 'rgba(102, 126, 234, 0.1)');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Part√≠culas de fondo
      backgroundParticles.forEach(p => {
        p.update();
        if (p.isDone()) p.reset();
      });

      // Corazones
      hearts.forEach(h => h.update());

      // Explosiones
      for (let i = explosions.length - 1; i >= 0; i--) {
        explosions[i].update();
        if (explosions[i].isDone()) explosions.splice(i, 1);
      }

      requestAnimationFrame(animate);
    }
    animate();

    // ‚úÖ Un solo evento para clic (PC) y toque (m√≥vil)
    canvas.addEventListener('pointerdown', e => {
      e.preventDefault();
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      for (let i = 0; i < hearts.length; i++) {
        if (hearts[i].isClicked(x, y)) {
          score++;
          document.getElementById('score').innerHTML = `Corazones tocados: ${score} <span style="color:#ffb6c1;">üíñ</span>`;
          explosions.push(new Explosion(hearts[i].x, hearts[i].y));
          hearts[i].reset();
          checkIncreaseHearts();
          break;
        }
      }
    });

    // Exponer puntaje para integraci√≥n externa
    window.getHeartGameScore = function() {
      return score;
    };
  </script>
</body>
</html>